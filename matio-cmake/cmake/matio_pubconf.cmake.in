/*
 * Copyright (C) 2010-2012   Christopher C. Hulbert
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY CHRISTOPHER C. HULBERT ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL CHRISTOPHER C. HULBERT OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#pragma once

#include "matio_export.h"

#define MATIO_PLATFORM "@MATIO_PLATFORM@"
#define PACKAGE_VERSION "@matio_VERSION_MAJOR@.@matio_VERSION_MINOR@.@matio_VERSION_PATCH@"

#define MATIO_MAJOR_VERSION @matio_VERSION_MAJOR@
#define MATIO_MINOR_VERSION @matio_VERSION_MINOR@
#define MATIO_RELEASE_LEVEL @matio_VERSION_PATCH@

/* Default file format */
#cmakedefine MAT_FT_DEFAULT @MAT_FT_DEFAULT@

#cmakedefine HAVE_INTTYPES_H 1
#ifdef HAVE_INTTYPES_H
#include <inttypes.h>
#endif

#cmakedefine HAVE_STDINT_H
#ifdef HAVE_STDINT_H
#include <stdint.h>
#endif

#cmakedefine HAVE_MAT_INT64_T
#ifdef HAVE_MAT_INT64_T
typedef int64_t  mat_int64_t;
#endif

#cmakedefine HAVE_MAT_UINT64_T
#ifdef HAVE_MAT_UINT64_T
typedef uint64_t mat_uint64_t;
#endif

#cmakedefine HAVE_MAT_INT32_T
#ifdef HAVE_MAT_INT32_T
typedef int32_t  mat_int32_t;
#endif

#cmakedefine HAVE_MAT_UINT32_T
#ifdef HAVE_MAT_UINT32_T
typedef uint32_t mat_uint32_t;
#endif

#cmakedefine HAVE_MAT_INT16_T
#ifdef HAVE_MAT_INT16_T
typedef int16_t  mat_int16_t;
#endif

#cmakedefine HAVE_MAT_UINT16_T
#ifdef HAVE_MAT_UINT16_T
typedef uint16_t mat_uint16_t;
#endif

#cmakedefine HAVE_MAT_INT8_T
#ifdef HAVE_MAT_INT8_T
typedef int8_t   mat_int8_t;
#endif

#cmakedefine HAVE_MAT_UINT8_T
#ifdef HAVE_MAT_UINT8_T
typedef uint8_t  mat_uint8_t;
#endif

/*
  The following macros handle noreturn attributes according to the latest
  C11/C++11 standard with fallback to GNU, Clang or MSVC extensions if using
  an older compiler.
*/
#if __STDC_VERSION__ >= 201112L
#define MATIO_NORETURN _Noreturn
#define MATIO_NORETURNATTR
#elif __cplusplus >= 201103L
#if (defined(__GNUC__) && __GNUC__ >= 5) || \
    (defined(__GNUC__) && defined(__GNUC_MINOR__) && __GNUC__ == 4 && __GNUC_MINOR__ >= 8)
#define MATIO_NORETURN [[noreturn]]
#define MATIO_NORETURNATTR
#elif (defined(__GNUC__) && __GNUC__ >= 3) || \
      (defined(__GNUC__) && defined(__GNUC_MINOR__) && __GNUC__ == 2 && __GNUC_MINOR__ >= 8)
#define MATIO_NORETURN
#define MATIO_NORETURNATTR __attribute__((noreturn))
#elif defined(__GNUC__)
#define MATIO_NORETURN
#define MATIO_NORETURNATTR
#else
#define MATIO_NORETURN [[noreturn]]
#define MATIO_NORETURNATTR
#endif
#elif defined(__clang__)
#if __has_attribute(noreturn)
#define MATIO_NORETURN
#define MATIO_NORETURNATTR __attribute__((noreturn))
#else
#define MATIO_NORETURN
#define MATIO_NORETURNATTR
#endif
#elif (defined(__GNUC__) && __GNUC__ >= 3) || \
      (defined(__GNUC__) && defined(__GNUC_MINOR__) && __GNUC__ == 2 && __GNUC_MINOR__ >= 8) || \
      (defined(__SUNPRO_C) && __SUNPRO_C >= 0x5110)
#define MATIO_NORETURN
#define MATIO_NORETURNATTR __attribute__((noreturn))
#elif (defined(_MSC_VER) && _MSC_VER >= 1200) || \
       defined(__BORLANDC__)
#define MATIO_NORETURN __declspec(noreturn)
#define MATIO_NORETURNATTR
#else
#define MATIO_NORETURN
#define MATIO_NORETURNATTR
#endif
